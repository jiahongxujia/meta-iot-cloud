From 21d8a51aa5fcc7ae3309123a4ab63bcdd634cbba Mon Sep 17 00:00:00 2001
From: Scott Ware <scott.r.ware@intel.com>
Date: Tue, 20 Feb 2018 17:45:16 +0000
Subject: [PATCH 1/3] Use provided dependencies

Signed-off-by: Scott Ware <scott.r.ware@intel.com>
---
 core/CMakeLists.txt        | 32 ++-----------------
 dependencies.cmake         | 71 ++-----------------------------------------
 modules/dependencies.cmake | 34 ++++++++-------------
 3 files changed, 18 insertions(+), 119 deletions(-)

diff --git a/core/CMakeLists.txt b/core/CMakeLists.txt
index 41c7cbf..550376e 100644
--- a/core/CMakeLists.txt
+++ b/core/CMakeLists.txt
@@ -32,30 +32,6 @@ elseif(UNIX) # LINUX or APPLE
     set(dynamic_library_c_file ./adapters/dynamic_library_linux.c ./adapters/gb_library_linux.c )
 endif()
 
-# Build libuv with an OS-appropriate script
-if (${enable_core_remote_module_support})
-    if(WIN32)
-        if(8 EQUAL CMAKE_SIZEOF_VOID_P)
-            message(STATUS "Building libuv for 64-bit Windows...")
-            set(build_libuv build_libuv.cmd x64)
-        else()
-            message(STATUS "Building libuv for 32-bit Windows...")
-            set(build_libuv build_libuv.cmd)
-        endif()
-    elseif(LINUX)
-        message(STATUS "Building libuv for Linux...")
-        set(build_libuv ./build_libuv.sh)
-    elseif(APPLE)
-        message(STATUS "Building libuv for macOS...")
-        set(build_libuv ./build_libuv_macos.sh)
-    endif()
-
-    execute_process (
-        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/tools/
-        COMMAND ${build_libuv}
-    )
-endif()
-
 #setting specific libraries to be loaded based on OS (for example, Linux needs "-ldl", windows does not)
 if(UNIX) # LINUX or APPLE
     set(dynamic_loader_library dl)
@@ -199,8 +175,6 @@ if(${enable_core_remote_module_support})
     include_directories( ../proxy/outprocess/inc)
     include_directories( ../proxy/message/inc)
 
-    include_directories(${CMAKE_SOURCE_DIR}/build_libuv/dist/include)
-    link_directories(${CMAKE_SOURCE_DIR}/build_libuv/dist/lib)
 endif()
 
 set(module_host_sources
@@ -245,9 +219,9 @@ if(${enable_core_remote_module_support})
         target_link_libraries(gateway_static ${CMAKE_SOURCE_DIR}/build_libuv/dist/lib/libuv.lib Psapi.lib Iphlpapi.lib Userenv.lib)
         target_link_libraries(module_host_static ${CMAKE_SOURCE_DIR}/build_libuv/dist/lib/libuv.lib Psapi.lib Iphlpapi.lib Userenv.lib)
     else()
-        target_link_libraries(gateway ${CMAKE_SOURCE_DIR}/build_libuv/dist/lib/libuv.a)
-        target_link_libraries(gateway_static ${CMAKE_SOURCE_DIR}/build_libuv/dist/lib/libuv.a)
-        target_link_libraries(module_host_static ${CMAKE_SOURCE_DIR}/build_libuv/dist/lib/libuv.a)
+        target_link_libraries(gateway uv)
+        target_link_libraries(gateway_static uv)
+        target_link_libraries(module_host_static uv)
     endif()
 endif()
 
diff --git a/dependencies.cmake b/dependencies.cmake
index 68223b9..1d957f0 100644
--- a/dependencies.cmake
+++ b/dependencies.cmake
@@ -10,28 +10,10 @@ include("gatewayFunctions.cmake")
 ###############################################################################
 ###################Find/Install/Build azure_c_shared_utility###################
 ###############################################################################
-set(PASSVARS)
-if(DEFINED OPENSSL_ROOT_DIR)
-    set(PASSVARS ${PASSVARS} -DOPENSSL_ROOT_DIR:PATH=${OPENSSL_ROOT_DIR})
+if(NOT azure_c_shared_utility_FOUND)
+    find_package(azure_c_shared_utility REQUIRED CONFIG)
 endif()
 
-findAndInstall(azure_c_shared_utility 1.0.25
-    ${PROJECT_SOURCE_DIR}/deps/c-utility
-    ${PROJECT_SOURCE_DIR}/deps/c-utility
-    -Duse_installed_dependencies=ON
-    -Drun_unittests=${run_unittests}
-    -Dbuild_as_dynamic=ON
-    -Duse_default_uuid=${use_xplat_uuid}
-    -Duse_condition=${enable_event_system}
-    ${PASSVARS}
-    -G "${CMAKE_GENERATOR}")
-set(SHARED_UTIL_INC_FOLDER ${AZURE_C_SHARED_UTILITY_INCLUDE_DIR} CACHE INTERNAL "this is what needs to be included if using sharedLib lib" FORCE)
-set(SHARED_UTIL_LIB_FOLDER ${AZURE_C_SHARED_LIBRARY_DIR} CACHE INTERNAL "this is what needs to be included if using sharedLib lib" FORCE)
-set(SHARED_UTIL_LIB aziotsharedutil CACHE INTERNAL "this is what needs to be included if using sharedLib lib" FORCE)
-set(SHARED_UTIL_SRC_FOLDER "${CMAKE_CURRENT_LIST_DIR}/deps/c-utility/src" CACHE INTERNAL "")
-set(SHARED_UTIL_ADAPTER_FOLDER "${CMAKE_CURRENT_LIST_DIR}/deps/c-utility/adapters" CACHE INTERNAL "")
-set_platform_files("${CMAKE_CURRENT_LIST_DIR}/deps/c-utility")
-
 ###############################################################################
 ##########################Find/Install/Build nanomsg###########################
 ###############################################################################
@@ -59,54 +41,7 @@ else()
 
     #If using a custom install prefix, tell find pkg to use it instead of defaults
     set(PKG_CONFIG_USE_CMAKE_PREFIX_PATH TRUE)
-    pkg_search_module(NANOMSG QUIET nanomsg)
-    if(NOT NANOMSG_FOUND)
-        findAndInstallNonFindPkg(nanomsg
-            ${PROJECT_SOURCE_DIR}/deps/nanomsg
-            ${PROJECT_SOURCE_DIR}/deps/nanomsg
-            -G "${CMAKE_GENERATOR}"
-            -DNN_TESTS=OFF
-            -DNN_TOOLS=OFF)
-    endif()
-
-    #If earlier cmake
-    if("${CMAKE_VERSION}" VERSION_GREATER 3.0.2)
-        pkg_search_module(NANOMSG REQUIRED nanomsg)
-        set (NANOMSG_LIB_LOCATION
-            "${NANOMSG_LIBDIR}/${CMAKE_SHARED_LIBRARY_PREFIX}${NANOMSG_LIBRARIES}${CMAKE_SHARED_LIBRARY_SUFFIX}")
-    else()
-        if(DEFINED ${dependency_install_prefix})
-            set(NANOMSG_INCLUDEDIR "${dependency_install_prefix}/include")
-            set(NANOMSG_LIBRARIES nanomsg)
-            set(NANOMSG_LIBRARY_DIRS "${dependency_install_prefix}/${CMAKE_INSTALL_LIBDIR}")
-        else()
-            pkg_search_module(NANOMSG REQUIRED nanomsg)
-            set(NANOMSG_LIBRARY_DIRS "${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}")
-        endif()
-        set (NANOMSG_LIB_LOCATION
-            "${NANOMSG_LIBRARY_DIRS}/${CMAKE_SHARED_LIBRARY_PREFIX}${NANOMSG_LIBRARIES}${CMAKE_SHARED_LIBRARY_SUFFIX}")
-
-    endif()
-
-    if (NOT NANOMSG_LIBDIR STREQUAL "/usr/lib")
-    # There seems to be a problem in CMake if nanomsg is found in the system 
-    # default location when cross compiling. If it's anywhere 
-    # else, we can create a imported target for it.  (Actually, this might 
-    # fail for any cross compile where nanomsg points to a system directory,
-    # so this might need to be refined as we find edge cases)
-        add_library(nanomsg SHARED IMPORTED)
-
-        set_target_properties(nanomsg PROPERTIES
-            INTERFACE_INCLUDE_DIRECTORIES "${NANOMSG_INCLUDEDIR}"
-            INTERFACE_LINK_LIBRARIES "${NANOMSG_LIBRARIES}"
-            IMPORTED_LOCATION "${NANOMSG_LIB_LOCATION}"
-        )
-        message(STATUS "NANOMSG LIBRARIES: ${NANOMSG_LIBRARIES}")
-        message(STATUS "NANOMSG CFLAGS: ${NANOMSG_CFLAGS}")
-        message(STATUS "NANOMSG LOCATION: ${NANOMSG_LIB_LOCATION}")
-    endif()
-    set(NANOMSG_INCLUDES "${NANOMSG_INCLUDEDIR}"  CACHE INTERNAL "")
-
+    pkg_search_module(NANOMSG REQUIRED nanomsg)
 
 endif()
 
diff --git a/modules/dependencies.cmake b/modules/dependencies.cmake
index 1bd569b..42a70ae 100644
--- a/modules/dependencies.cmake
+++ b/modules/dependencies.cmake
@@ -6,34 +6,24 @@ include("../gatewayFunctions.cmake")
 ###############################################################################
 ###########################Find/Install/Build uamqp############################
 ###############################################################################
-findAndInstall(uamqp 1.0.25 ${PROJECT_SOURCE_DIR}/deps/uamqp ${PROJECT_SOURCE_DIR}/deps/uamqp -Duse_installed_dependencies=ON -G "${CMAKE_GENERATOR}")
+if(${use_amqp})
+    if(NOT uamqp_FOUND)
+        find_package(uamqp REQUIRED CONFIG)
+    endif()
+endif()
 
 ###############################################################################
 ###########################Find/Install/Build umqtt############################
 ###############################################################################
-findAndInstall(umqtt 1.0.25 ${PROJECT_SOURCE_DIR}/deps/umqtt ${PROJECT_SOURCE_DIR}/deps/umqtt -Duse_installed_dependencies=ON -G "${CMAKE_GENERATOR}")
+if(${use_mqtt})
+    if(NOT umqtt_FOUND)
+        find_package(umqtt REQUIRED CONFIG)
+    endif()
+endif()	
 
 ###############################################################################
 #######################Find/Install/Build azure_iot_sdks#######################
 ###############################################################################
-#The azure_iot_sdks repo requires special treatment. Parson submodule must be initialized.
-if(NOT EXISTS ${PROJECT_SOURCE_DIR}/deps/iot-sdk-c/deps/parson/README.md)
-    execute_process(
-        COMMAND git submodule update --init ${PROJECT_SOURCE_DIR}/deps/iot-sdk-c
-        WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
-        RESULT_VARIABLE res
-    
-    )
-    if(${res})
-        message(FATAL_ERROR "Error pulling iot-sdk-c submodule: ${res}")
-    endif()
-    execute_process(
-        COMMAND git submodule update --init deps/parson
-        WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}/deps/iot-sdk-c
-        RESULT_VARIABLE res
-    )
-    if(${res})
-        message(FATAL_ERROR "Error pulling parson submodule: ${res}")
-    endif()
+if(NOT azure_iot_sdks_FOUND)
+    find_package(azure_iot_sdks REQUIRED CONFIG)
 endif()
-findAndInstall(azure_iot_sdks 1.1.5 ${PROJECT_SOURCE_DIR}/deps/iot-sdk-c ${PROJECT_SOURCE_DIR}/deps/iot-sdk-c -Duse_installed_dependencies=ON -Duse_openssl=OFF -Dbuild_as_dynamic=ON -Dskip_samples=ON -G "${CMAKE_GENERATOR}")
-- 
1.9.1

